// Generated by Selenium IDE
const assert = require('assert');

// Generated by New Relic SideKick exporter - Default Suite
    
// A global start timer
const globalStartTime = Date.now();
// Step type definitions
const STEP_TYPE = { HARD: "HARD", SOFT: "SOFT", OPTIONAL: "OPTIONAL" };
// A global indicator of number of steps
let STEP = 1;
// A counter of steps per category
let CATEGORY_STEP = {};
// A record of failed soft steps
let FAILED_STEPS = [];
// A hard failure message
let HARD_FAILURE = "";

const stepLogger = async (type, description, category, stepFn) => {
    const thisStep = STEP++;
    if (!CATEGORY_STEP[category]) {
        CATEGORY_STEP[category] = 1;
    }
    const categoryStep = CATEGORY_STEP[category]++;
    const startTimestamp = Date.now() - globalStartTime;
    console.log(`START  Step ${thisStep}: [${category}:${categoryStep}] start: ${startTimestamp}ms -> ${description}`);
    try {
        await stepFn(); //runs the function for this step
        const endTimestamp = Date.now() - globalStartTime;
        const elapsed = endTimestamp - startTimestamp;
        console.log(`FINISH Step ${thisStep}: [${category}:${categoryStep}] ended: ${endTimestamp}ms, elapsed: ${elapsed}ms -> ${description}`);
        return Promise.resolve(true);
    }
    catch (err) {
        const error = err;
        if (type == STEP_TYPE.HARD) {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}\n ╚══> This is a HARD step error so processing of further steps will cease and the journey will be failed.`);
            HARD_FAILURE = `Step ${thisStep}: [${category}:${categoryStep}] -> ${description}`;
            throw error;
        }
        else if (type == STEP_TYPE.SOFT) {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}\n ╚═══> This is a SOFT step error so processing of further steps will continue but the journey will be failed.`);
            console.log(`\n${error.message}\n\n`);
            FAILED_STEPS.push({
                failure: `Step ${thisStep}: [${category}:${categoryStep}] - ${description}`,
                reason: error.message,
            });
            return Promise.resolve(true);
        }
        else {
            console.log(`ERROR! Step ${thisStep}: [${category}:${categoryStep}] -> ${description}\n ╚═══> This is an OPTIONAL step so this error will not fail the journey.`);
            console.log(`\n${error.message}\n\n`);
            return Promise.resolve(true);
        }
    }
}
const By = $selenium.By;
const until = $selenium.until;
const vars = new Map();
const TIMEOUT = 3000;

  // Test Start - BlazedemoTest
      
  try {
  
await stepLogger(
  STEP_TYPE.HARD,
  "Open https://blazedemo.com/",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.get("https://blazedemo.com/")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Set window size w:945 h:1012",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.manage().window().setRect({ width: 945, height: 1012 })
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click name=fromPort",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.name("fromPort")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Select label=Boston from name=fromPort",
  "New Relic Synthetics Journey",
  async () => {
    {
      const dropdown = await $webDriver.wait(until.elementLocated(By.name("fromPort")), TIMEOUT)
      await dropdown.findElement(By.xpath("//option[. = 'Boston']")).click()
    }
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click name=toPort",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.name("toPort")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Select label=Berlin from name=toPort",
  "New Relic Synthetics Journey",
  async () => {
    {
      const dropdown = await $webDriver.wait(until.elementLocated(By.name("toPort")), TIMEOUT)
      await dropdown.findElement(By.xpath("//option[. = 'Berlin']")).click()
    }
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click css=.btn-primary",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.css(".btn-primary")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click css=tr:nth-child(3) .btn",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.css("tr:nth-child(3) .btn")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=inputName",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("inputName")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type test into id=inputName",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("inputName")), TIMEOUT).sendKeys("test")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=address",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("address")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type test into id=address",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("address")), TIMEOUT).sendKeys("test")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=city",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("city")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type test into id=city",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("city")), TIMEOUT).sendKeys("test")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=state",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("state")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type test into id=state",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("state")), TIMEOUT).sendKeys("test")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=zipCode",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("zipCode")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type 12345 into id=zipCode",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("zipCode")), TIMEOUT).sendKeys("12345")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=creditCardNumber",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("creditCardNumber")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type 3333444455556666 into id=creditCardNumber",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("creditCardNumber")), TIMEOUT).sendKeys("3333444455556666")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click id=nameOnCard",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("nameOnCard")), TIMEOUT).click()
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Type test into id=nameOnCard",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.id("nameOnCard")), TIMEOUT).sendKeys("test")
  }
)
await stepLogger(
  STEP_TYPE.HARD,
  "Click css=.btn-primary",
  "New Relic Synthetics Journey",
  async () => {
    await $webDriver.wait(until.elementLocated(By.css(".btn-primary")), TIMEOUT).click()
  }
)
  
  if (FAILED_STEPS.length > 0) {
    console.log(
      `========[ JOURNEY END ]========
      Journey failed: ${FAILED_STEPS.length} soft failures detected:`
    );
    console.log(FAILED_STEPS);
    assert.fail(
      `Journey failed: There were ${FAILED_STEPS.length} soft step failures.`
    );
  } else {
    console.log(
      `========[ JOURNEY END ]========
      Journey completed successfully`
    );
  }
  

} catch (err) {
  console.log(err.message);
  // Check if the error is due to a HARD step failure
  if (HARD_FAILURE.length > 0) {
    console.log(
      `========[ JOURNEY END ]========
      Journey failed: there was a hard step failure.`
    );
    console.log(HARD_FAILURE);
  } else {
    console.log(
      `========[ JOURNEY END ]========
      Journey failed: an unexpected error occurred.`
    );
  }
  if (FAILED_STEPS.length > 0) {
    console.log(
      `There were also ${FAILED_STEPS.length} soft step failures:`
    );
    console.log(FAILED_STEPS);
  }
  assert.fail(
    `Journey failed: ${HARD_FAILURE.length > 0 ? 'There was a hard step failure and ' : ''}${FAILED_STEPS.length} soft step failures.`
  );
}
  
